name: Changelog Review & Enhancement

on:
  pull_request:
    paths:
      - 'CHANGELOG.md'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  review-changelog:
    name: Review Changelog Changes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get changelog diff
        id: diff
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            
            const changelogFile = files.find(f => f.filename === 'CHANGELOG.md');
            if (!changelogFile) {
              console.log('No CHANGELOG.md changes found');
              return null;
            }
            
            // Extract added lines (new changelog entries)
            const newEntries = changelogFile.patch
              .split('\n')
              .filter(line => line.startsWith('+') && !line.startsWith('+++'))
              .map(line => line.substring(1))
              .join('\n');
            
            return {
              patch: changelogFile.patch,
              newEntries,
              additions: changelogFile.additions,
              deletions: changelogFile.deletions
            };

      - name: Analyze with Claude
        id: analysis
        if: steps.diff.outputs.result != 'null'
        uses: actions/github-script@v7
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        with:
          script: |
            const Anthropic = require('@anthropic-ai/sdk');
            const anthropic = new Anthropic({
              apiKey: process.env.ANTHROPIC_API_KEY,
            });
            
            const diff = ${{ steps.diff.outputs.result }};
            
            const message = await anthropic.messages.create({
              model: 'claude-3-opus-20240229',
              max_tokens: 2000,
              temperature: 0.3,
              system: `You are a changelog expert reviewer. Review changelog entries for:
                       1. Clarity and user-friendliness
                       2. Proper categorization (Added, Changed, Fixed, etc.)
                       3. Grammar and spelling
                       4. Completeness of information
                       5. Following Keep a Changelog format
                       6. Proper linking to issues/PRs
                       
                       Provide constructive feedback and suggested improvements.`,
              messages: [{
                role: 'user',
                content: `Review this changelog addition:
                
                ${diff.newEntries}
                
                Provide:
                1. Overall quality score (1-10)
                2. Specific issues found
                3. Suggested improvements
                4. Enhanced version of the entry (if needed)`
              }]
            });
            
            return JSON.parse(message.content[0].text);

      - name: Post review comment
        if: steps.analysis.outputs.result
        uses: actions/github-script@v7
        with:
          script: |
            const analysis = ${{ steps.analysis.outputs.result }};
            
            let comment = `## 📝 Changelog Review by Claude\n\n`;
            comment += `**Quality Score**: ${analysis.score}/10\n\n`;
            
            if (analysis.issues && analysis.issues.length > 0) {
              comment += `### Issues Found\n`;
              analysis.issues.forEach(issue => {
                comment += `- ${issue}\n`;
              });
              comment += '\n';
            }
            
            if (analysis.suggestions && analysis.suggestions.length > 0) {
              comment += `### Suggestions\n`;
              analysis.suggestions.forEach(suggestion => {
                comment += `- ${suggestion}\n`;
              });
              comment += '\n';
            }
            
            if (analysis.enhanced) {
              comment += `### Enhanced Version\n`;
              comment += `<details>\n<summary>Click to see suggested improvements</summary>\n\n`;
              comment += `\`\`\`markdown\n${analysis.enhanced}\n\`\`\`\n`;
              comment += `</details>\n\n`;
            }
            
            comment += `---\n`;
            comment += `*This review helps ensure our changelog is clear, complete, and user-friendly.*`;
            
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              body: comment,
              event: analysis.score < 7 ? 'REQUEST_CHANGES' : 'COMMENT'
            });

  check-format:
    name: Validate Changelog Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Validate format
        run: |
          # Check if CHANGELOG.md exists
          if [ ! -f "CHANGELOG.md" ]; then
            echo "❌ CHANGELOG.md not found"
            exit 1
          fi
          
          # Validate Keep a Changelog format
          if ! grep -q "# Changelog" CHANGELOG.md; then
            echo "❌ Missing '# Changelog' header"
            exit 1
          fi
          
          if ! grep -q "Keep a Changelog" CHANGELOG.md; then
            echo "❌ Missing Keep a Changelog reference"
            exit 1
          fi
          
          if ! grep -q "Semantic Versioning" CHANGELOG.md; then
            echo "❌ Missing Semantic Versioning reference"
            exit 1
          fi
          
          # Check for valid version headers
          if ! grep -E "^## \[(Unreleased|\d+\.\d+\.\d+)\]" CHANGELOG.md; then
            echo "⚠️ No valid version headers found"
          fi
          
          echo "✅ Changelog format validation passed"

  suggest-entries:
    name: Suggest Missing Entries
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Find unlogged changes
        id: unlogged
        uses: actions/github-script@v7
        with:
          script: |
            // Get commits in this PR
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            
            // Filter for significant commits
            const significantCommits = commits.filter(commit => {
              const message = commit.commit.message.toLowerCase();
              return !message.startsWith('merge') && 
                     !message.includes('changelog') &&
                     !message.includes('wip') &&
                     (message.includes('feat') || 
                      message.includes('fix') || 
                      message.includes('breaking'));
            });
            
            if (significantCommits.length === 0) {
              return null;
            }
            
            // Check if these are mentioned in changelog
            const fs = require('fs');
            let changelog = '';
            try {
              changelog = fs.readFileSync('CHANGELOG.md', 'utf8').toLowerCase();
            } catch {
              return { missing: significantCommits };
            }
            
            const missing = significantCommits.filter(commit => {
              const hash = commit.sha.substring(0, 7);
              return !changelog.includes(hash);
            });
            
            return { missing };

      - name: Suggest missing entries
        if: steps.unlogged.outputs.result && steps.unlogged.outputs.result.missing.length > 0
        uses: actions/github-script@v7
        with:
          script: |
            const { missing } = ${{ steps.unlogged.outputs.result }};
            
            let comment = `## 📋 Missing Changelog Entries\n\n`;
            comment += `I noticed ${missing.length} significant commits that might need changelog entries:\n\n`;
            
            missing.forEach(commit => {
              const hash = commit.sha.substring(0, 7);
              const message = commit.commit.message.split('\n')[0];
              comment += `- \`${hash}\`: ${message}\n`;
            });
            
            comment += `\nConsider adding these to the changelog if they contain user-facing changes.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });