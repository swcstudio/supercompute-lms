name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'release/**']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  NODE_VERSION: '22.15.0'
  DENO_VERSION: 'v2.x'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.filter.outputs.core }}
      remix: ${{ steps.filter.outputs.remix }}
      next: ${{ steps.filter.outputs.next }}
      shared: ${{ steps.filter.outputs.shared }}
      docs: ${{ steps.filter.outputs.docs }}
      tests: ${{ steps.filter.outputs.tests }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            core:
              - 'core/**'
              - 'shared/**'
              - 'package.json'
              - 'tsconfig.json'
            remix:
              - 'remix/**'
              - 'shared/**'
              - 'package.json'
              - 'tsconfig.json'
            next:
              - 'next/**'
              - 'shared/**'
              - 'package.json'
              - 'tsconfig.json'
            shared:
              - 'shared/**'
              - 'package.json'
              - 'tsconfig.json'
            docs:
              - 'docs/**'
              - '*.md'
            tests:
              - 'tests/**'
              - '**/*.test.ts'
              - '**/*.test.tsx'

  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: detect-changes
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache
            node_modules
            .turbo
            .nx
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run Biome checks
        run: npm run lint

      - name: Type checking
        run: npm run typecheck

      - name: Check formatting
        run: npm run deno:fmt -- --check

      - name: Deno lint
        run: npm run deno:lint

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        framework: [core, remix, next, shared]
    steps:
      - uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests for ${{ matrix.framework }}
        run: npm run test:${{ matrix.framework }}

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.framework }}
          path: tests/coverage/${{ matrix.framework }}

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality-checks, test-unit]
    steps:
      - uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration

      - name: Run cross-framework tests
        run: npm run test:cross-framework

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [quality-checks]
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        framework: [core, remix, next]
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build ${{ matrix.framework }}
        run: npm run build:${{ matrix.framework }}

      - name: Run E2E tests
        run: npm run test:e2e -- --project=${{ matrix.browser }} --grep ${{ matrix.framework }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results-${{ matrix.framework }}-${{ matrix.browser }}
          path: tests/output/playwright-report/

  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [quality-checks]
    steps:
      - uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test:performance

      - name: Run multithreading tests
        run: npm run test:multithreading

      - name: Run WASM tests
        run: npm run test:wasm

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: tests/output/performance/

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality-checks]
    strategy:
      matrix:
        include:
          - framework: core
            platform: web
          - framework: remix
            platform: web
          - framework: next
            platform: web
          - framework: core
            platform: desktop
          - framework: core
            platform: mobile
    steps:
      - uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Rust (for Tauri)
        if: matrix.platform == 'desktop'
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'desktop' && runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install dependencies
        run: npm ci

      - name: Build ${{ matrix.framework }} for ${{ matrix.platform }}
        run: npm run build:${{ matrix.platform }} -- --frameworks ${{ matrix.framework }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.framework }}-${{ matrix.platform }}
          path: |
            ${{ matrix.framework }}/dist/
            ${{ matrix.framework }}/.next/
            ${{ matrix.framework }}/build/

  build-storybook:
    name: Build Storybook
    runs-on: ubuntu-latest
    needs: [quality-checks]
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Storybook
        run: npm run build-storybook

      - name: Upload Storybook
        uses: actions/upload-artifact@v4
        with:
          name: storybook-static
          path: storybook-static/

  deploy-preview:
    name: Deploy Preview
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build, test-e2e]
    permissions:
      pull-requests: write
    strategy:
      matrix:
        framework: [core, remix, next]
    steps:
      - uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.framework }}-web

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_${{ matrix.framework }} }}
          vercel-args: '--prod'

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Preview deployment for **${{ matrix.framework }}** is ready!\n\nðŸ”— ${{ steps.deploy.outputs.preview-url }}`
            })

  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build, test-e2e, test-integration]
    environment: staging
    steps:
      - uses: actions/checkout@v5

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          npm run deploy -- --environment staging

  deploy-production:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build, test-e2e, test-integration, test-performance]
    environment: production
    steps:
      - uses: actions/checkout@v5

      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          npm run deploy -- --environment production

  notify:
    name: Notify Results
    if: always()
    runs-on: ubuntu-latest
    needs: [quality-checks, test-unit, test-integration, test-e2e, build]
    steps:
      - name: Send Slack notification
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Pipeline ${{ job.status }} for ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}